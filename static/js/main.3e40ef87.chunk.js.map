{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Grid","createGrid","color","d3","domain","Object","keys","props","facts","shapes","range","node","boxsize","selectAll","data","g_node","join","attr","g","x","y","style","d","a","g2a","s","undefined","readout","darker","text","c","g_letter","this","ref","width","height","Component","GridForm","handleIndexChange","e","setState","parseInt","target","value","state","witnesses","values","index","place","env","push","type","forEach","Function","onChange","size","Math","ceil","log10","length","min","max","JSON","stringify","App","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3e40ef87.chunk.js","sourcesContent":["import './App.css';\nimport data from \"./data\";\nimport * as d3 from 'd3';\nimport { Component } from 'react';\n\n// Uses the d3.js integration described in https://www.pluralsight.com/guides/using-d3.js-inside-a-react-app\nclass Grid extends Component {\n  componentDidMount() {\n    this.createGrid()\n  }\n  componentDidUpdate() {\n    this.createGrid()\n  }\n  createGrid = () => {\n    const g2a = (d) => {\n      return this.props.facts.g2a[d.x + \",\" + d.y];\n    }\n\n    const color = d3.scaleOrdinal().domain(Object.keys(this.props.facts.shapes)).range(d3.schemeSet3);\n\n    const node = this.node;\n    const boxsize = 80;\n    d3.select(node).selectAll(\"rect\")\n      .data(this.props.facts.g_node)\n      .join(\"rect\")\n      .attr(\"x\", (g) => g.x * boxsize + (g.y % 2 === 0 ? boxsize/2 : 0) + 10)\n      .attr(\"y\", (g) => g.y * boxsize + 10)\n      .style(\"fill\", (g) => {\n        const a = g2a(g);\n        const s = this.props.facts.color[a.x + \",\" + a.y];\n        if (s === undefined) {\n          return 'white';\n        } else {\n          if (this.props.facts.readout[a.x + \",\" + a.y] !== undefined) {\n            return d3.color(color(s)).darker(0.5);\n          } else {\n            return color(s);\n          }\n        }\n      })\n      .attr(\"width\", boxsize)\n      .attr(\"height\", boxsize);\n\n    d3.select(node).selectAll(\"text\")\n      .data(this.props.facts.g_node)\n      .join(\"text\")\n      .attr(\"x\", (g) => g.x * boxsize + (g.y % 2 === 0 ? boxsize/2 : 0) + 10 + boxsize/2)\n      .attr(\"y\", (g) => g.y * boxsize + 10 + boxsize/2)\n      .text((g) => {\n        const c = this.props.facts.g_letter[g.x + \",\" + g.y];\n        if (c === undefined) {\n          return \"\";\n        } else {\n          return c;\n        }\n      });\n  }\n  render() {\n    return <svg ref={node => this.node = node} width={800} height={700} />\n  }\n}\n\nclass GridForm extends Component {\n  // index helps us look at multiple solutions\n  constructor(props) {\n    super(props);\n    this.state = {'index': 0};\n  }\n\n  handleIndexChange = (e) => {\n    this.setState({'index': parseInt(e.target.value)});\n  }\n\n  render() {\n    // Not really sure if you can ever have multiple Calls\n    const witnesses = data[\"Call\"][0][\"Witnesses\"];\n    const values = witnesses[this.state.index][\"Value\"];\n    const facts = {\n      g_node: [],\n      g2a: {},\n      place: {},\n      shapes: {},\n      color: {},\n      readout: {},\n      g_letter: {},\n    };\n    const env = {\n      'g_node': (g) => facts.g_node.push(g),\n      'g2a': (g, a) => {facts.g2a[g.x + \",\" + g.y] = a},\n      'g': (x, y) => ({type: 'g', x: x, y: y}),\n      'a': (x, y) => ({type: 'a', x: x, y: y}),\n      'a_node': () => {},\n      'shape': () => {},\n      'shapes': (s, a) => {\n        if (facts.shapes[s] === undefined) {\n          facts.shapes[s] = [a];\n        } else {\n          facts.shapes[s].push(a);\n        }\n      },\n      'color': (a, s) => facts.color[a.x + \",\" + a.y] = s,\n      'readout': (a, s) => facts.readout[a.x + \",\" + a.y] = s,\n      'place': (s, a) => facts.place[s] = a,\n      'a_letter': () => {},\n      'g_letter': (g, c) => facts.g_letter[g.x + \",\" + g.y] = c,\n      'answer': () => {},\n    };\n    // I ended up doing parsing in this goofy way: ASP atoms look\n    // like valid JavaScript programs, so what I do is I just\n    // assign interpretations to these programs by giving JavaScript\n    // functions for each literal, and then just \"eval\" the program.\n    // Pretty grungy, but saves me from having to actually have a\n    // parser.\n    function parse_value(x) {\n      // eslint-disable-next-line no-new-func\n      return Function('env', 'with(env) { ' + x + '; }')(env);\n    }\n    values.forEach(parse_value)\n\n    return <div>\n      <div>\n        Model:\n        <input type=\"text\" value={this.state.index} onChange={this.handleIndexChange} size={Math.ceil(Math.log10(witnesses.length))} />\n        <input type=\"range\" min={0} max={witnesses.length-1} value={this.state.index} onChange={this.handleIndexChange} />\n      </div>\n      <Grid facts={facts} index={this.state.index} />\n      <pre>{JSON.stringify(data, null, 2)}</pre>\n    </div>\n  }\n}\n\nfunction App() {\n  return (\n    <GridForm />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}